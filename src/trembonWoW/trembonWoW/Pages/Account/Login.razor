@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using trembonWoW.Core.Authentication
@using trembonWoW.Layouts

@page "/account/login"
@layout BaseLayout
@attribute [AllowAnonymous]

@inject NavigationManager navigation
@inject SignInManager<WoWUser> signInManager

<MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">
    <MudText Align="Align.Center" GutterBottom="true">
        <MudImage Height="250" Src="/images/world-of-warcraft-wrath-of-the-lich-king-logo.png" Alt="World of Warcraft: Wrath of the Lich King"></MudImage>
    </MudText>
    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">trembon's WoW</MudText>
    <EditForm OnValidSubmit="LoginForm" FormName="login" EditContext="editContext">
        <MudGrid Spacing="6" Justify="Justify.Center">
            <MudItem xs="8">
                <div class="mud-input-control mud-input-text-with-label mud-input-input-control">
                    <div class="mud-input-control-input-container">
                        <div class="mud-input mud-input-text mud-input-text-with-label mud-input-underline mud-shrink mud-typography-input">
                            <InputText @bind-Value="model!.Username" class="mud-input-slot mud-input-root mud-input-root-text" placeholder="Username" required />
                        </div>
                        <label class="mud-input-label mud-input-label-animated mud-input-label-text mud-input-label-inputcontrol">Username</label>
                    </div>
                </div>
            </MudItem>
            <MudItem xs="8">
                <div class="mud-input-control mud-input-text-with-label mud-input-input-control">
                    <div class="mud-input-control-input-container">
                        <div class="mud-input mud-input-text mud-input-text-with-label mud-input-underline mud-shrink mud-typography-input">
                            <InputText @bind-Value="model!.Password" type="password" class="mud-input-slot mud-input-root mud-input-root-text" placeholder="Password" required />
                        </div>
                        <label class="mud-input-label mud-input-label-animated mud-input-label-text mud-input-label-inputcontrol">Password</label>
                    </div>
                </div>
            </MudItem>
            <MudItem xs="8">
                <DataAnnotationsValidator />
                <ValidationSummary />
                @if (invalidLogin)
                {
                    <MudText Align="Align.Center" Color="Color.Error">Invalid login, please try again</MudText>
                }
            </MudItem>
            <MudItem xs="6" Class="d-flex justify-center">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" DropShadow="false" Color="Color.Primary" Size="Size.Large" Class="mt-8">Login</MudButton>
            </MudItem>
            <MudItem xs="6" Class="d-flex justify-center">
                <MudButton Variant="Variant.Filled" DropShadow="false" Color="Color.Secondary" Size="Size.Large" Class="mt-8">Register</MudButton>
            </MudItem>
        </MudGrid>
    </EditForm>
</MudContainer>

@code {
    [SupplyParameterFromForm]
    private InputModel? model { get; set; }
    private EditContext? editContext;

    private bool invalidLogin = false;

    [SupplyParameterFromQuery]
    private string? returnUrl { get; set; }

    protected override void OnInitialized()
    {
        model ??= new();
        editContext = new(model);
    }

    public async Task LoginForm()
    {
        var result = await signInManager.PasswordSignInAsync(model.Username, model.Password, true, false);
        if (result.Succeeded)
        {
            try
            {
                navigation.NavigateTo(returnUrl ?? "/");
            }catch{ /* do nothing */ }
        }
        else
        {
            invalidLogin = true;
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Username is required")]
        [StringLength(32, ErrorMessage = "Username can not be longer than 16 characters")]
        [RegularExpression(@"^[a-zA-Z0-9]+$", ErrorMessage = "Username may only contain letters and numbers.")]
        public string Username { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        [StringLength(16, ErrorMessage = "Password can not be longer than 16 characters")]
        [DataType(DataType.Password)]
        [RegularExpression(@"^[a-zA-Z0-9]+$", ErrorMessage = "Password may only contain letters and numbers.")]
        public string Password { get; set; } = "";
    }
}