@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using System.Security.Claims
@using trembonWoW.Core.Services

@page "/account/change-password"
@attribute [Authorize]
@rendermode InteractiveServer

@inject IAccountService accountService
@inject IDialogService dialogService

<PageTitle>Change Password</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small">
    @if (changedPassword is not null)
    {
        if (changedPassword.Value)
        {
            <MudAlert Severity="Severity.Success">Your password has now changed, so use that one next time logging in!</MudAlert>
        }
        else
        {
            <MudAlert Severity="Severity.Error">Something went wrong, try again later or with a different password!</MudAlert>
        }
    }

    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
        <MudTextField T="string" Label="Password" HelperText="Choose a password" @ref="pwField1"
                      InputType="InputType.Password"
                      Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                      RequiredError="Password is required!" />
        <MudTextField T="string"
                      Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                      Validation="@(new Func<string, string?>(PasswordMatch))" />

        <MudGrid Class="d-flex justify-center mt-4">
            <MudItem>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success || changedPassword is not null)" Class="ml-auto" OnClick="@ChangePasswordAction">Change Password</MudButton>
            </MudItem>
        </MudGrid>
    </MudForm>
</MudContainer>

@code {
    private bool? changedPassword = null;

    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }

        if (pw.Length < 4 || pw.Length > 16)
            yield return "Password must be at least of length 4 and not longer than 16 characters";

        if (!Regex.IsMatch(pw, @"^[a-zA-Z0-9!]+$"))
            yield return "Password may only contain letters, numbers and !";
    }

    private string? PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";

        return null;
    }

    private async Task ChangePasswordAction()
    {
        int? accountId = await authenticationState.GetClaimsValue(ClaimTypes.NameIdentifier, 0);
        changedPassword = await accountService.ChangePassword(accountId ?? 0, pwField1.Value ?? "");
    }
}
